/*!
 * operation-tree v1.0.0
 * (c) 2019-2019 yujinpan
 * Released under the MIT License.
 */
"use strict";function e(e){return!(!Array.isArray(e)||!e.length)}function r(r,t){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;!function r(o,c){o.forEach((function(o,u,a){n=o[i.children],t(o,u,a,c),e(n)&&r(n,o)}))}(r,null)}function t(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}Object.defineProperty(exports,"__esModule",{value:!0});var o={children:"children",parent:"parent"};exports.defaultTreeDataProps=o,exports.treeEach=r,exports.treeFilter=function(r,i){var c,u=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:o).children;return function r(o,a){var f,l,p,s=[];return o.forEach((function(o,h,v){p=!1,f=function(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?n(o,!0).forEach((function(r){t(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(o).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}({},o),e(c=o[u])&&(l=r(c,f),(p=e(l))?f[u]=l:delete f[u]),(i(o,h,v,a)||p)&&s.push(f)})),s}(r)},exports.treeMap=function(r,t){var n,i=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:o).children;return function r(o,c){return o.map((function(o,u,a){var f=t(o,u,a,c);return e(n=f[i])&&(f[i]=r(n,f)),f}))}(r)},exports.treeToFlatArray=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,i=[];return r(e,(function(){i.push(t.apply(void 0,arguments))}),n),i};