/*!
 * operation-tree-node v1.0.4
 * (c) 2019-2019 yujinpan
 * Released under the MIT License.
 */
"use strict";function r(r){return!(!Array.isArray(r)||!r.length)}function e(e,n){var t,c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"};!function e(i,o){i.forEach((function(i,u,l){t=i[c.children],!1!==n(i,u,l,o)&&r(t)&&e(t,i)}))}(e,null)}function n(e,n){var t,c=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"}).children;return function e(i,o){return i.map((function(i,u,l){var f=n(i,u,l,o);return r(t=f[c])&&(f[c]=e(t,f)),f}))}(e)}function t(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function c(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(n,!0).forEach((function(e){t(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):c(n).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function o(r){return function(r){if(Array.isArray(r)){for(var e=0,n=new Array(r.length);e<r.length;e++)n[e]=r[e];return n}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(r,e){var n,t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{parent:"parent"}).parent;r.forEach((function(r){!function r(c){n=c[t];n&&!1!==e(n)&&r(n)}(r)}))}Object.defineProperty(exports,"__esModule",{value:!0}),exports.treeCheck=function(t,c){var o,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{id:"id",children:"children",parent:"parent"},f=l.children,a=l.id,h=[],d=[],p=function(r){d.push(r[a]),r._checked=!0};return e(n(t,(function(r,e,n,t){return i({},r,{_checked:!1,parent:t})}),l),(function(n){if(n._checked)return!1;c.includes(n[a])&&(p(n),h.push(n),r(o=n[f])&&e(o,(function(r){p(r)}),l))}),l),u(h,(function(r){if(r._checked)return!1;var e=r[f].length;if(1===e)p(r);else{var n=r._checkedCount||0;r._checkedCount=n+1,r._checkedCount===e&&p(r)}}),l),d},exports.treeEach=e,exports.treeEachParent=u,exports.treeFilter=function(e,n){var t,c=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"}).children;return function e(o,u){var l,f,a,h=[];return o.forEach((function(o,d,p){a=!1,l=i({},o),r(t=o[c])&&(f=e(t,l),(a=r(f))?l[c]=f:delete l[c]),(n(o,d,p,u)||a)&&h.push(l)})),h}(e)},exports.treeFind=function(e,n){var t,c,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"},o=null;return function e(u,l){var f,a=u.length;for(f=0;f<a;f++){if(c=u[f],n(c,f,u,l)){o=c;break}if(r(t=c[i.children])&&(c=e(t,c))){o=c;break}}return o}(e,null)},exports.treeMap=n,exports.treeMerge=function(e,n){var t,c,u,l=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"}).children;return function e(f){var a=[];return f.forEach((function(f){var h=a.find((function(r){return n(r,f)}));t=f[l],h?(c=h[l],r(t)&&(r(c)?h[l]=e([].concat(o(c),o(t))):h[l]=e(t))):(u=i({},f),r(t)&&(u[l]=o(t)),a.push(u))})),a}(e)},exports.treeSort=function(e,t){var c,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{children:"children"},l=u.children;return n(e=o(e).sort(t),(function(e){return c=e[l],e=i({},e),r(c)&&(e[l]=o(e[l]).sort(t)),e}),u)},exports.treeToFlatArray=function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(r){return r},t=arguments.length>2?arguments[2]:void 0,c=[];return e(r,(function(){c.push(n.apply(void 0,arguments))}),t),c};